
********problem statement ***********

**Reverse a linked list**

Given a linked list of N nodes. The task is to reverse this list.

Example 1:
Input:
LinkedList: 1->2->3->4->5->6
Output: 6 5 4 3 2 1
Explanation: After reversing the list, 
elements are 6->5->4->3->2->1.

Example 2:
Input:
LinkedList: 2->7->8->9->10
Output: 10 9 8 7 2
Explanation: After reversing the list,
elements are 10->9->8->7->2.

Your Task:
The task is to complete the function reverseList() with head reference as the only argument and should return new head after reversing the list.

Expected Time Complexity: O(N).
Expected Auxiliary Space: O(1).

Constraints:
1 <= N <= 104

******Code*******

//function Template for Java

/* linked list node class:

class Node {
    int data;
    Node next;
    Node(int value) {
        this.value = value;
    }
}*/
class Solution
{
    Node reverseList(Node head)
    {
       // Approach 1: TC:O(n) SC:O(n)
        Stack<Integer> st = new Stack<>();
        
        Node temp = head;
        
        while(temp != null){
            st.add(temp.data);
            temp = temp.next;
        }
        
        temp = head;
        
        while(temp != null){
            temp.data = st.pop();
            temp = temp.next;
        }
        
        return head;
        
        
        //Approach 2: TC:O(n) SC:O(1)
        Node temp = head;
        Node prev = null;
        
        while(temp != null){
            Node front = temp.next;
            temp.next = prev;
            prev = temp;
            temp = front;
        }
        
        return prev;
        
        
         //Approach 3: Using recursion TC:O(n) SC:O(n) - recursive stack space
         
        if(head == null || head.next == null){
            return head;
        }
        
        Node newHead = reverseList(head.next);
        Node front = head.next;
        front.next = head;
        head.next = null;
        return newHead;
    }
}